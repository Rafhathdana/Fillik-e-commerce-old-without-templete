function zoomProductImage(event) {
  const img = event.target;
  const zoomedImg = document.createElement("img");
  zoomedImg.setAttribute("src", img.getAttribute("src"));
  zoomedImg.classList.add("zoomedProductImg");
  img.parentElement.appendChild(zoomedImg);
  const imgWidth = img.clientWidth;
  const imgHeight = img.clientHeight;
  const zoomedImgWidth = imgWidth * 2;
  const zoomedImgHeight = imgHeight * 2;
  const maxTranslateX = zoomedImgWidth - imgWidth;
  const maxTranslateY = zoomedImgHeight - imgHeight;
  let isDragging = false;
  let startX, startY, translateX = 0, translateY = 0, scale = 1;

  function updateTransform() {
    zoomedImg.style.transform = `translate(${translateX}px, ${translateY}px) scale(${scale})`;
  }

  function handleMouseDown(e) {
    isDragging = true;
    startX = e.clientX;
    startY = e.clientY;
  }

  function handleMouseMove(e) {
    if (!isDragging) return;
    const dx = e.clientX - startX;
    const dy = e.clientY - startY;
    translateX += dx / scale;
    translateY += dy / scale;
    translateX = Math.max(Math.min(translateX, maxTranslateX), -maxTranslateX);
    translateY = Math.max(Math.min(translateY, maxTranslateY), -maxTranslateY);
    startX = e.clientX;
    startY = e.clientY;
    updateTransform();
  }

  function handleMouseUp() {
    isDragging = false;
  }

  function handleWheel(e) {
    e.preventDefault();
    const delta = e.deltaY * -0.01;
    const newScale = scale + delta;
    if (newScale >= 1 && newScale <= 4) {
      const rect = zoomedImg.getBoundingClientRect();
      const mouseX = e.clientX - rect.left;
      const mouseY = e.clientY - rect.top;
      const ratioX = mouseX / zoomedImgWidth;
      const ratioY = mouseY / zoomedImgHeight;
      const newTranslateX = (translateX - mouseX) * (newScale / scale) + mouseX;
      const newTranslateY = (translateY - mouseY) * (newScale / scale) + mouseY;
      translateX = Math.max(Math.min(newTranslateX, maxTranslateX), -maxTranslateX);
      translateY = Math.max(Math.min(newTranslateY, maxTranslateY), -maxTranslateY);
      scale = newScale;
      updateTransform();
    }
  }

  function handleMouseLeave() {
    zoomedImg.style.transform = "none";
    zoomedImg.removeEventListener("mousedown", handleMouseDown);
    zoomedImg.removeEventListener("mousemove", handleMouseMove);
    zoomedImg.removeEventListener("mouseup", handleMouseUp);
    zoomedImg.removeEventListener("wheel", handleWheel);
    zoomedImg.removeEventListener("mouseleave", handleMouseLeave);
    setTimeout(() => zoomedImg.remove(), 100);
  }

  zoomedImg.style.width = `${zoomedImgWidth}px`;
  zoomedImg.style.height = `${zoomedImgHeight}px`;
  zoomedImg.style.transformOrigin = "0 0";
  updateTransform();
  zoomedImg.addEventListener("mousedown", handleMouseDown);
  zoomedImg.addEventListener("mousemove", handleMouseMove);
  zoomedImg.addEventListener("mouseup", handleMouseUp);
  zoomedImg.addEventListener("wheel", handleWheel);
  zoomedImg.addEventListener("mouseleave", handleMouse
